generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users {
  id              String         @id @default(cuid())
  name            String
  imageUrl        String
  bgImage         String?
  email           String         @unique
  emailVerified   DateTime?      // Added for NextAuth
  usn             String?        @unique
  password        String?
  about           String         @default("")  // Made optional with default
  tag             String         @unique
  isPrivate       Boolean        @default(false)
  role            String         @default("USER")
  posts           Posts[]        @relation("posts")
  communityPosts  CommunityPost[] @relation("communityPosts")
  comments        Comments[]     @relation("comment")
  replies         Replies[]      @relation("reply")
  savedPosts      Posts[]        @relation("savedposts")
  likedPosts      Posts[]        @relation("LikedPosts")
  followers       Users[]        @relation("UserFollows")
  following       Users[]        @relation("UserFollows")
  communities     Community[]    @relation("community")
  communityAdmin  Community[]    @relation("community-admin")
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  isVerified      Boolean        @default(false)
  chatRooms       ChatRoom[]     @relation("chat-room")
  messages        Messages[]     @relation("message")
  followRequests  FollowRequest[] @relation("followRequests")
  sentRequests    FollowRequest[] @relation("sentRequests")
  groups          GroupMember[]
  groupMessages   GroupMessage[]
  communityJoinRequests CommunityJoinRequest[]
  notifications   Notification[]
  reports         Report[]       @relation("reporter")
  accounts        Account[]      // Added for NextAuth
  sessions        Session[]      // Added for NextAuth
}

model Posts {
  id         String     @id @default(uuid())
  type       String
  text       String?
  image      String?
  video      String?
  user       Users      @relation("posts", fields: [UserEmail], references: [email])
  UserEmail  String
  savedby    Users[]    @relation("savedposts")
  likedBy    Users[]    @relation("LikedPosts")
  comments   Comments[]
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  reports    Report[]
  isHidden   Boolean    @default(false)
}

model Comments {
  id         String    @id @default(uuid())
  text       String
  post       Posts     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId     String
  user       Users     @relation("comment", fields: [UserEmail], references: [email])
  UserEmail  String
  replies    Replies[]
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}

model Replies {
  id         String   @id @default(uuid())
  text       String
  comment    Comments @relation(fields: [commentId], references: [id])
  commentId  String
  user       Users    @relation("reply", fields: [UserEmail], references: [email])
  UserEmail  String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([commentId], name: "post_id_index")
  @@index([UserEmail], name: "Reply_id_index")
}

model FeaturedUsers {
  id         String  @id @unique
  name       String
  email      String  @unique
  imageUrl   String
  about      String?
  tag        String? @unique
  isVerified Boolean @default(false)
}

model Community {
  id             String          @id @default(uuid())
  name           String          @unique
  members        Users[]         @relation("community")
  description    String
  imageUrl       String
  admin          Users[]         @relation("community-admin")
  communityPosts CommunityPost[] @relation("communityPost")
  isPrivate      Boolean         @default(false)
  joinRequests   CommunityJoinRequest[]
  updatedAt      DateTime        @updatedAt @default(now())
}

model CommunityPost {
  id          String    @id @default(uuid())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  user        Users     @relation("communityPosts", fields: [UserEmail], references: [email])
  UserEmail   String
  text        String?
  image       String?
  video       String?
  community   Community @relation("communityPost", fields: [communityId], references: [id], onDelete: Cascade)
  communityId String

  @@index([UserEmail], name: "communityPosts_index")
  @@index([communityId], name: "communityPosts_Id")
}

model ChatRoom {
  id        String     @id @default(uuid())
  members   Users[]    @relation("chat-room")
  messages  Messages[] @relation("messages")
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model Messages {
  id         String   @id @default(uuid())
  text       String?
  image      String?
  video      String?
  document   Json?    // Array of objects: { url: string, name: string }
  createdAt  DateTime @default(now())
  chatRoom   ChatRoom @relation("messages", fields: [chatRoomId], references: [id])
  chatRoomId String
  user       Users    @relation("message", fields: [UserEmail], references: [email])
  UserEmail  String

  @@index([chatRoomId], name: "chatRoomId")
  @@index([UserEmail], name: "message-userId")
}

model FollowRequest {
  id          String   @id @default(uuid())
  fromUser    Users    @relation("sentRequests", fields: [fromUserId], references: [id])
  fromUserId  String
  toUser      Users    @relation("followRequests", fields: [toUserId], references: [id])
  toUserId    String
  status      String   @default("pending") // pending, accepted, rejected
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([fromUserId, toUserId])
}

model Group {
  id          String         @id @default(uuid())
  name        String
  imageUrl    String?
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  members     GroupMember[]
  messages    GroupMessage[]
  createdBy   String         // User ID of the creator
}

model GroupMember {
  id        String   @id @default(uuid())
  groupId   String
  userId    String
  role      String   @default("member") // "admin" or "member"
  joinedAt  DateTime @default(now())
  group     Group    @relation(fields: [groupId], references: [id], onDelete: Cascade)
  user      Users    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([groupId, userId])
}

model GroupMessage {
  id        String   @id @default(uuid())
  groupId   String
  userId    String
  content   String
  imageUrl  String?
  videoUrl  String?
  document  Json?    // Array of objects: { url: string, name: string }
  createdAt DateTime @default(now())
  group     Group    @relation(fields: [groupId], references: [id], onDelete: Cascade)
  user      Users    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model CommunityJoinRequest {
  id           String     @id @default(uuid())
  community    Community  @relation(fields: [communityId], references: [id], onDelete: Cascade)
  communityId  String
  user         Users      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String
  status       String     @default("pending") // pending, approved, rejected
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  @@unique([communityId, userId])
}

model Notification {
  id        String   @id @default(uuid())
  user      Users    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  type      String   // e.g. "community-join-request"
  message   String
  link      String?
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
}

model AdminSettings {
  id            String   @id @default(uuid())
  darkMode      Boolean  @default(false)
  emailAlerts   Boolean  @default(true)
  sessionTimeout Int     @default(30) // in minutes
  updatedAt     DateTime @updatedAt
}

model Event {
  id          String   @id @default(uuid())
  title       String
  description String?
  location    String?
  start       DateTime
  end         DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Announcement {
  id          String   @id @default(uuid())
  title       String
  content     String
  attachments Json // Array of objects: { url: string, name: string }
  category    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Report {
  id          String   @id @default(uuid())
  post        Posts    @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId      String
  reporter    Users    @relation("reporter", fields: [reporterId], references: [id])
  reporterId  String
  reason      String
  description String
  status      String   @default("pending") // pending, reviewed
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([postId])
  @@index([reporterId])
}

model EmailVerification {
  id        String   @id @default(cuid())
  email     String
  code      String
  createdAt DateTime @default(now())
  expiresAt DateTime
}

model PreApprovedStudent {
  id        String   @id @default(cuid())
  email     String   @unique
  usn       String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model HelpMessage {
  id          String   @id @default(cuid())
  email       String
  message     String
  status      String   @default("New") // New, In Progress, Resolved
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  internalNote String?
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?

  user Users @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         Users    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}